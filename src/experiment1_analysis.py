# experiment1_analysis.py
import torch
import os
import pandas as pd  # Using pandas for easier data handling and saving

def analyze_data(data_dir='results/entropy_data', device='cuda'):
    """
    Loads the data generated by experiment1_data_generation.py, calculates
    H_ev and sigma_ev, and saves the results to a CSV file.

    Args:
        data_dir: Directory where the data is stored.
        device: 'cuda' or 'cpu'.
    """

    loaded_data = torch.load(os.path.join(data_dir, 'all_data.pt'))

    results = []
    for (N, M), H_obs_values in loaded_data.items():
        H_obs_values = H_obs_values.to(device) #move to device.
        H_ev = torch.mean(H_obs_values)
        sigma_ev = torch.std(H_obs_values)
        results.append((N, M, H_ev.item(), sigma_ev.item()))

    # Convert results to a Pandas DataFrame
    df = pd.DataFrame(results, columns=['N', 'M', 'H_ev', 'sigma_ev'])

    # Save to CSV
    csv_file = os.path.join(data_dir, 'analysis_results.csv')
    df.to_csv(csv_file, index=False)
    print(f"Analysis results saved to {csv_file}")

    return df # Return the dataframe

if __name__ == '__main__':
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    df = analyze_data(device=device)
    print (df)